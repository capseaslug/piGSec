import gi
import threading
import time
import tkinter as tk
import pybluez
import os

gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")
from gi.repository import Gtk as gtk, AppIndicator3 as appindicator

# Set of allowed and blocked MAC addresses
allowed_devices = set()
blocked_devices = set()

# File paths for whitelist and blacklist
whitelist_file = "whitelist.txt"
blacklist_file = "blacklist.txt"

# Function to create the whitelist and blacklist files during setup
def create_files():
    if not os.path.exists(whitelist_file):
        open(whitelist_file, "a").close()

    if not os.path.exists(blacklist_file):
        open(blacklist_file, "a").close()

# Function to load the whitelist from a file
def load_whitelist():
    with open(whitelist_file, "r") as file:
        for line in file:
            allowed_devices.add(line.strip())

# Function to save the whitelist to a file
def save_whitelist():
    with open(whitelist_file, "w") as file:
        for mac_address in allowed_devices:
            file.write(mac_address + "\n")

# Function to scan for nearby Bluetooth devices using pybluez
def scan_devices():
    devices_list.delete(0, tk.END)  # Clear the list box
    nearby_devices = pybluez.discover_devices(duration=8, lookup_names=True, lookup_class=True)

    for addr, name, device_class in nearby_devices:
        if addr not in allowed_devices:
            # Block the device from connecting.
            pybluez.cancel_discovery()
            print("Unauthorized device attempting to connect! MAC address:", addr)
        else:
            print("Device is allowed:", addr, name, device_class)

# Function to create the taskbar menu
def create_menu():
    menu = gtk.Menu()

    # Add a "Scan Devices" option
    item_scan = gtk.MenuItem("Scan Devices")
    item_scan.connect("activate", scan_devices)
    menu.append(item_scan)

    # Add a "View Connected Devices" option
    item_view_connected = gtk.MenuItem("View Connected Devices")
    item_view_connected.connect("activate", view_connected_devices)
    menu.append(item_view_connected)

    # Add a "Modify Whitelist" option
    item_modify_whitelist = gtk.MenuItem("Modify Whitelist")
    item_modify_whitelist.connect("activate", modify_whitelist)
    menu.append(item_modify_whitelist)

    # Add a "Quit" option
    item_quit = gtk.MenuItem("Quit")
    item_quit.connect("activate", quit_app)
    menu.append(item_quit)

    menu.show_all()
    return menu

# Function to view connected Bluetooth devices (not implemented)
def view_connected_devices(_):
    print("View Connected Devices")

# Function to modify the whitelist (not implemented)
def modify_whitelist(_):
    print("Modify Whitelist")

# Function to quit the application
def quit_app(_):
    gtk.main_quit()

def main():
    create_files()
    load_whitelist()

    # Create the app indicator
    APPINDICATOR_ID = "bluetooth_security_indicator"
    indicator = appindicator.Indicator.new(
        APPINDICATOR_ID,
        os.path.abspath("icon.png"),
        appindicator.IndicatorCategory.SYSTEM_SERVICES,
    )
    indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
    indicator.set_menu(create_menu())

    # Start the GTK main loop
    gtk.main()

    # Save the whitelist before exiting the application.
    save_whitelist()

if __name__ == "__main__":
    main()
