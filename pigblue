import tkinter as tk
import bluetooth
import av

# Set of allowed MAC addresses
allowed_devices = set()

# Flag to indicate whether MAC address filtering is enabled
mac_address_filtering = False

# Function to scan for nearby Bluetooth devices
def scan_devices():
    devices_list.delete(0, tk.END)  # Clear the list box
    nearby_devices = bluetooth.discover_devices(lookup_names=True, duration=8, lookup_class=True)

    for addr, name, device_class in nearby_devices:
        if mac_address_filtering and not is_allowed_device(addr):
            # Block the device from connecting.
            bluetooth.cancel_discovery()
            result_label.config(text="Unauthorized device attempting to connect! MAC address: " + addr)
        else:
            devices_list.insert(tk.END, f"{addr} - {name} - {device_class}")

# Function to pair with a selected device securely
def secure_pairing():
    selected_index = devices_list.curselection()
    if selected_index:
        selected_device = devices_list.get(selected_index)
        addr = selected_device.split(" - ")[0]

        # Implement your secure pairing logic here.
        # For example, use Secure Simple Pairing (SSP) or a PIN code for pairing.

        try:
            bluetooth.pair(addr, "1234")
            result_label.config(text=f"Paired securely with {selected_device.split(' - ')[1]}.")
        except bluetooth.btcommon.BluetoothError:
            result_label.config(text="Failed to pair with device.")

# Function to add a device's MAC address to the whitelist
def add_to_whitelist():
    # Implement your MAC address whitelist logic here.
    # You can add the selected device's MAC address to the allowed_devices set.
    # Be sure to save the updated whitelist to a file using save_whitelist().

    selected_device = devices_list.get(devices_list.curselection())
    addr = selected_device.split(" - ")[0]

    allowed_devices.add(addr)
    save_whitelist()
    result_label.config(text=f"Added {selected_device.split(' - ')[1]} to the whitelist.")

# Function to remove a device's MAC address from the whitelist
def remove_from_whitelist():
    # Implement your MAC address whitelist logic here.
    # You can remove the selected device's MAC address from the allowed_devices set.
    # Be sure to save the updated whitelist to a file using save_whitelist().

    selected_device = devices_list.get(devices_list.curselection())
    addr = selected_device.split(" - ")[0]

    allowed_devices.remove(addr)
    save_whitelist()
    result_label.config(text=f"Removed {selected_device.split(' - ')[1]} from the whitelist.")

# Function to handle alerts for unrecognized devices
def handle_alert_for_unrecognized_device(addr):
    # Check if MAC address filtering is enabled.
    # If it is, then you can block the device from connecting.
    # Otherwise, you can display a warning message to the user.

    global mac_address_filtering

    if mac_address_filtering:
        # Block the device from connecting.
        bluetooth.cancel_discovery()
        result_label.config(text="Unauthorized device attempting to connect! MAC address: " + addr)
        # Check if the file is malicious
        if av.is_malicious(addr):
            result_label.config(text="File from unauthorized device is malicious!")
    else:
        # Display a warning message to the user.
        result_label.config(text="Unauthorized device attempting to connect. MAC address filtering is not enabled.")

# Function to save the whitelist to a file
