# Main application
def main():
    create_files()
    load_whitelist()
    load_blacklist()

    # Create the main window.
    root = tk.Tk()
    root.title("Bluetooth Security App")

    # Create a label to display the status messages.
    result_label = tk.Label(root)
    result_label.pack()

    # Create a button to scan for nearby devices.
    scan_button = tk.Button(root, text="Scan", command=scan_devices)
    scan_button.pack()

    # Create a list box to display the nearby devices.
    devices_list = tk.Listbox(root)
    devices_list.pack()

    # Create a checkbox to enable/disable MAC address filtering.
    mac_address_filtering_checkbox = tk.Checkbutton(root, text="Enable MAC address filtering", onvalue=True, offvalue=False)
    mac_address_filtering_checkbox.pack()

    # Create a button to pair with a selected device.
    pair_button = tk.Button(root, text="Pair", command=lambda: secure_pairing(devices_list.get(tk.ANCHOR)))
    pair_button.pack()

    # Create a drop-down menu to select the sorting method.
    sorting_menu = tk.OptionMenu(root, "", "Bandwidth usage", "RSSI", "Number of attributes", "Network protocol")
    sorting_menu.pack()

    # Create a checkbox to enable/disable filtering by network attributes.
    filter_by_attributes_checkbox = tk.Checkbutton(root, text="Filter by network attributes", onvalue=True, offvalue=False)
    filter_by_attributes_checkbox.pack()

    # Start the main loop.
    root.mainloop()

# Check if MAC address filtering is enabled.
if mac_address_filtering_checkbox.get():
    mac_address_filtering = True
else:
    mac_address_filtering = False

# Scan for nearby devices.
scan_devices()

# Display the list of nearby devices.
for addr, name, device_class in nearby_devices:
    if mac_address_filtering and not addr in allowed_devices:
        # Block the device from connecting.
        bluetooth.cancel_discovery()
        result_label.config(text="Unauthorized device attempting to connect! MAC address: " + addr)
    else:
        if filter_by_attributes_checkbox.get():
            # Check if the device has the desired attributes.
            if has_attributes(addr):
                devices_list.insert(tk.END, f"{addr} - {name} - {device_class}")
        else:
            devices_list.insert(tk.END, f"{addr} - {name} - {device_class}")

# Sort the list of devices based on the selected sorting method.
if sorting_menu.get() == "Bandwidth usage":
    devices_list.sort(key=lambda device: device.bandwidth_usage)
elif sorting_menu.get() == "RSSI":
    devices_list.sort(key=lambda device: device.rssi)
elif sorting_menu.get() == "Number of attributes":
    devices_list.sort(key=lambda device: device.number_of_attributes)
elif sorting_menu.get() == "Network protocol":
    devices_list.sort(key=lambda device: device.network_protocol)
